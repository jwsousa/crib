{"ts":1360171508789,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"\"use strict\";\n\nvar games = [];\n\nexports.gameForNewConnection = function(io, socket){\n  console.log('New socket looking for a game: ' + socket.id);\n  for(var gameIndex=0;gameIndex<games.length;gameIndex++){\n    var game = games[gameIndex];\n    if(game.active && game.playerCount < 2){\n      console.log('Found a game for ' + socket.id + ': ' + game.name);\n      game.addClient(socket);\n      return game;\n    }\n  }\n  var newGame = new exports.Game(io);\n  console.log('Making new game for ' + socket.id + ': ' + newGame.name);\n  newGame.addClient(socket);\n  return newGame;\n}\n\nexports.Game = function(io){\n  this.active = true;\n  this.io = io;\n  this.name = 'crib' + games.length;\n  games.push(this);\n  this.playerCount = 0;\n  this.deck = null;\n  this.cards = null;\n  this.sockets = {};\n  this.roles = {};\n  this.opponent = {};\n  this.scores = {};\n\n  this.setDealer = function(socketId){\n    this.dealer = socketId\n    this.roles[socketId] = 'dealer';\n  }\n  this.setPlayer = function(socketId){\n    this.player = socketId\n    this.roles[socketId] = 'player';\n  }\n  this.addClient = function(socket){\n    if(this.playerCount>=2){\n      console.log('Already 2 people in this game!');\n      return;\n    }\n    this.playerCount++;\n    this.sockets[socket.id] = socket;\n    this.scores[socket.id] = 0;\n    socket.join(this.name);\n    this.resetHand(socket.id);\n    this.emit(socket.id, 'set scores', {'score': 0,\n                                        'opponentScore': 0});\n    if(this.playerCount==1){\n      this.setDealer(socket.id);\n      this.send(this.dealer, 'You are the dealer. Please wait for a second player and the cards will be dealt.')\n    }else if(this.playerCount==2){\n      this.setPlayer(socket.id);\n      this.startGame();\n    }\n  }\n  this.startGame = function(){\n    this.send(this.player, 'You are NOT the dealer. ' + this.player);\n    this.send(this.dealer, 'You are the dealer. ' + this.dealer);\n\n    this.opponent[this.dealer] = this.player\n    this.opponent[this.player] = this.dealer\n\n    this.pushHand(this.dealer);\n    this.pushHand(this.player);\n  }\n  this.addCrib = function(socketId, cardIndices){\n    var role = this.roles[socketId];\n    var crib = this.cards['crib'];\n    var hand = this.cards[role];\n    cardIndices.sort(); // Ensure cards indices to remove are sorted.\n\n    crib.add(hand.remove(cardIndices[0]));\n    crib.add(hand.remove(cardIndices[1]-1));\n    this.pushHand(socketId);\n    this.emitToOpponent(socketId, 'set unflipped', {'section': 'otherhand',\n                                                    'number': 4});\n    this.emitToRoom('set unflipped', {'section': 'crib',\n                                      'number': crib.length()});\n    if (crib.length() == 4){\n      this.cribComplete();\n    }\n  }\n  this.cribComplete = function(){\n    this.showFlip();\n    this.setCribUnflipped();\n    this.startPlay();\n  }\n  this.startPlay = function(){\n    this.setPlayCount(0);\n    this.playedCards = {'dealer':[], 'player':[], 'play':[]}\n    console.log('Requesting 1st card from: ' + this.player)\n    this.requestCard(this.player);\n  }\n  this.setPlayCount = function(count){\n    this.playCount = count;\n    this.emitToRoom('set count', {'count': this.playCount});\n  }\n  this.addScore = function(socketId, score){\n    if(score<1)\n      return;\n    console.log(socketId + ': Adding ' + score);\n    this.scores[socketId] = Math.min(this.scores[socketId] + score, 121);\n    this.sendScores();\n    if(this.scores[socketId] == 121) {\n      this.gameWon(socketId);\n    }\n  }\n  this.gameWon = function(socketId){\n    this.send(socketId, \"You've won!\");\n    this.sendToOpponent(socketId, \"You've lost!\");\n    this.endGame();\n  }\n  this.cardPlayed = function(socketId, cardIndex){\n    var role = this.roles[socketId];\n    var card = this.cards[role].get(cardIndex);\n    if(this.playCount + card['playValue'] > 31){\n      this.requestCard(socketId);\n      return;\n    }\n    this.playedCards[role].push(card);\n    this.playedCards['play'].unshift(card);\n\n    var card = this.cards[role].get(cardIndex);\n    var playNumber = this.playedCards[role].length\n\n    this.emit(socketId, 'set disabled', {'section': 'hand',\n                                         'index': cardIndex});\n    this.emitToOpponent(socketId, 'set disabled', {'section': 'otherhand',\n                                                   'index': cardIndex});\n    this.emitToOpponent(socketId, 'set card', {'section': 'otherhand',\n                                               'index': cardIndex,\n                                               'card': card});\n    this.emitToOpponent(socketId, 'set play number', {'section': 'otherhand',\n                                                      'index': cardIndex,\n                                                      'playNumber': playNumber});\n    this.emit(socketId, 'set play number', {'section': 'hand',\n                                            'index': cardIndex,\n                                            'playNumber': playNumber});\n    this.setPlayCount(this.playCount + card['playValue']);\n    this.checkPlayScore(socketId);\n    this.requestNextCard(socketId);\n  }\n  this.checkPlayScore = function(socketId){\n    var score = 0;\n    var playCards = this.playedCards['play'];\n    console.log('Checking play score for ' + exports.cardsToString(playCards));\n    if(this.playCount==15){\n      this.messageToSections(socketId, '15 for +2');\n      score += 2;\n    }\n    if(playCards.length > 1 && playCards[0].face == playCards[1].face){\n      this.messageToSections(socketId, 'Pair for 2');\n      score += 2;\n      if(playCards.length > 2 && playCards[0].face == playCards[2].face){\n        this.messageToSections(socketId, 'Royal Pair for 4 more');\n        score += 4;\n        if(playCards.length > 3 && playCards[0].face == playCards[3].face){\n          this.messageToSections(socketId, '4 of a kind for 6 more');\n          score += 6;\n        }\n      }\n    }\n    var longestRun = this.checkLastRun();\n    if(longestRun) {\n      this.messageToSections(socketId, 'Run for ' + longestRun);\n      score += longestRun;\n    }\n    this.addScore(socketId, score);\n  }\n  this.checkLastRun = function(){\n    var playCards = this.playedCards['play'];\n    for(var n=playCards.length;n>2;n--){\n      var lastNCards = playCards.slice(0, n);\n      if(exports.isRun(lastNCards)){\n        // console.log('Run for ' + n);\n        return n;\n      }\n    }\n    return 0;\n  }\n  this.requestNextCard = function(lastCardPlayer){\n    if(this.playedCards['dealer'].length + this.playedCards['player'].length == 8){\n      this.messageToSections(lastCardPlayer, 'Last card for one')\n      this.addScore(lastCardPlayer, 1);\n      this.handOver();\n      return\n    }\n    var nextCardPlayer = this.opponent[lastCardPlayer];\n    if(this.canPlay(nextCardPlayer)) {\n      this.requestCard(nextCardPlayer);\n      return;\n    }\n    if(this.canPlay(lastCardPlayer)) {\n      this.requestCard(lastCardPlayer);\n      if(this.playedCards[this.roles[nextCardPlayer]].length < 4) {\n        this.addScore(lastCardPlayer, 1);\n      }\n      return;\n    }\n    if(this.playCount == 31){\n      this.messageToSections(lastCardPlayer, '31 for 2')\n      this.addScore(lastCardPlayer, 2);\n    }else{\n      this.messageToSections(lastCardPlayer, 'Go for 1');\n      this.addScore(lastCardPlayer, 1);\n    }\n    this.playedCards['play'] = [];\n    this.setPlayCount(0);\n    this.requestNextCard(lastCardPlayer);\n  }\n  this.canPlay = function(socketId){\n    var role = this.roles[socketId];\n    var cards = this.cards[role];\n    var playedCards = this.playedCards[role];\n    for(var i=0;i<cards.length();i++) {\n      var card = cards.get(i);\n      var cardNotPlayed = playedCards.indexOf(card) == -1;\n      if(cardNotPlayed && card.playValue + this.playCount <= 31){\n        return true;\n      }\n    }\n    return false;\n  }\n  this.handOver = function(){\n    this.emitToRoom('set cards', {'section': 'crib',\n                                  'cards': this.cards['crib'].cards});\n    this.emitToRoom('enable all');\n    this.emitToRoom('new hand ready');\n    this.emitToRoom('set count', {'count': -1});\n\n    this.cards['player'].flip(this.cards['flip']);\n    this.cards['crib'].flip(this.cards['flip']);\n    this.cards['dealer'].flip(this.cards['flip']);\n\n    this.scoreHands();\n\n    this.switchPlayers();\n    this.newHand();\n\n    this.startNextHand(this.dealer);\n    this.startNextHand(this.player);\n  }\n  this.startNextHand = function(socketId){\n    var game = this;\n    this.sockets[socketId].once('start next hand', function(){\n      game.resetHand(socketId);\n      game.pushHand(socketId);\n      if(socketId == game.dealer){\n        game.send(socketId, 'You are the dealer.');\n      }else{\n        game.send(socketId, 'You are NOT the dealer.');\n      }\n      game.emit(socketId, 'add message', {'section': 'hand', 'message': '===New Hand==='});\n      game.emit(socketId, 'add message', {'section': 'otherhand', 'message': '===New Hand==='});\n    });\n  }\n  this.scoreHands = function(){\n    this.addScore(this.player, this.scoreHand('player'));\n    this.addScore(this.dealer, this.scoreHand('dealer'));\n    this.addScore(this.dealer, this.scoreHand('crib'));\n\n  }\n  this.switchPlayers = function(){\n    var currentDealer = this.dealer;\n    var currentPlayer = this.player;\n    this.setDealer(currentPlayer);\n    this.setPlayer(currentDealer);\n  }\n  this.newHand = function(){\n    this.deck = exports.makeDeck();\n    this.cards = exports.makeCardSets(this.deck);\n  }\n  this.sendScores = function(){\n    this.emit(this.dealer, 'set scores', {'score': this.scores[this.dealer],\n                                          'opponentScore': this.scores[this.player]});\n    this.emit(this.player, 'set scores', {'score': this.scores[this.player],\n                                          'opponentScore': this.scores[this.dealer]});\n  }\n  this.send = function(socketId, message){\n    this.sockets[socketId].send(message);\n  }\n  this.sendToRoom = function(message){\n    this.io.sockets.in(this.name).send(message);\n  }\n  this.sendToOpponent = function(socketId, message){\n    socketId = this.opponent[socketId];\n    this.send(socketId, message);\n  }\n  this.emit = function(socketId, event, data){\n    this.sockets[socketId].emit(event, data);\n  }\n  this.emitToOpponent = function(socketId, event, data){\n    socketId = this.opponent[socketId];\n    this.emit(socketId, event, data);\n  }\n  this.emitToRoom = function(event, data){\n    this.io.sockets.in(this.name).emit(event, data);\n  }\n  this.emitToSections = function(socketId, event, data){\n    data['section'] = 'hand';\n    this.emit(socketId, event, data);\n    data['section'] = 'otherhand';\n    this.emitToOpponent(socketId, event, data);\n  }\n  this.messageToSections = function(socketId, message){\n    this.emitToSections(socketId, 'add message', {'message': message});\n  }\n  this.pushHand = function(socketId){\n    var cards = this.cards[this.roles[socketId]];\n    this.emit(socketId, 'set cards', {'section': 'hand',\n                                      'cards': cards.cards});\n    console.log('Sending ' + cards.length() + ' cards to  ' + socketId);\n    if(cards.length()==6){\n      console.log('Requesting crib from ' + socketId);\n      this.requestCrib(socketId);\n    }\n  }\n  this.resetHand = function(socketId){\n    this.emit(socketId, 'set cards', {'section': 'crib', 'cards': []});\n    this.emit(socketId, 'set unflipped', {'section': 'crib',\n                                          'number': this.cards['crib'].length()});\n    this.emit(socketId, 'set count', {'count': -1});\n    this.emit(socketId, 'set unflipped', {'section': 'flip',\n                                          'number': 1});\n    this.emit(socketId, 'set unflipped', {'section': 'hand',\n                                          'number': 6});\n    this.emit(socketId, 'set unflipped', {'section': 'otherhand',\n                                          'number': 6-this.cards['crib'].length()});\n  }\n  this.setCribUnflipped = function(){\n    this.emitToRoom('set unflipped', {'section': 'crib', 'number': 4});\n  }\n  this.showFlip = function(){\n    this.emitToRoom('set card', {'section': 'flip',\n                                 'index': 0,\n                                 'card': this.cards['flip']});\n    if(this.cards['flip'].face == 'J'){\n      this.addScore(this.dealer, 2);\n    }\n\n  }\n  this.requestCards = function(socketId, number, callback){\n    var game = this;\n    this.sockets[socketId].once('cards selected', function(data){\n      var cardIndices = data['cards'].map(function(cardId){\n        return parseInt(cardId[4]);\n      });\n      return callback(cardIndices);\n    });\n    this.emit(socketId, 'need cards', {'role': this.roles[socketId],\n                                       'game': this.name,\n                                       'number': number});\n  }\n  this.requestCrib = function(socketId){\n    var game = this;\n    this.requestCards(socketId, 2, function (cards) {\n      game.addCrib(socketId, cards);\n    });\n  }\n  this.requestCard = function(socketId){\n    var game = this;\n    this.requestCards(socketId, 1, function (cards) {\n      game.cardPlayed(socketId, cards[0]);\n    });\n  }\n  this.endGame = function(){\n    this.active = false;\n    for(var socketId in this.sockets) {\n      this.sockets[socketId].removeAllListeners();\n      this.sockets[socketId].leave(this.name);\n      // this.sockets[socketId].disconnect();\n    }\n  }\n  this.scoreHand = function(handName){\n    var isCrib = handName=='crib'\n    var hand = this.cards[handName];\n    var socketId = handName == 'player' ? this.player : this.dealer;\n\n    var score = 0;\n    var runs = []; // Lengths of detected runs (3, 4 or 5).\n    this.messageToSections(socketId, 'Scoring: ' + hand.toString());\n    // Look at all possible combinations of cards.\n    var combos = exports.combinations(hand.fullHand());\n    // console.log(combos.length + ' combos')\n    for (var i=0;i<combos.length;i++) {\n      var combo = combos[i];\n      var cardSum = exports.addCardSum(combo); // Sum of play values for hards in combo.\n      // Check for 15s.\n      if(cardSum==15){\n        this.messageToSections(socketId, '-15 for 2');\n        score += 2; //+2 for any 15.\n      }\n      // Check for pairs.\n      if(combo.length==2 && combo[0].face == combo[1].face){\n        this.messageToSections(socketId, '-Pair for 2');\n        score += 2;//+2 for any pair. Will automatically find 3/4 of a kinds.\n      }else if(combo.length>2){\n        // Combos larger than 2 may contain a run.\n        if(exports.isRun(combo)){\n          // console.log('Run of ' + combo.length + ' (this run)');\n          runs.push(combo.length);\n        }\n      }\n    }\n    runs.sort().reverse();\n    // Runs array is now in reverse sorted order. For example :\n    // if the hand was a double run of 4 it would look like [4, 4, 3, 3].\n    for (var i=0;i<runs.length;i++) {\n      if(runs[0]==runs[i]){\n        // Add to score the length of any runs that are as long as the longest run.\n        this.messageToSections(socketId, '-Run for ' + runs[i]);\n        score += runs[i];\n      }\n    }\n    // Check for flushes.\n    if(exports.isFlush(hand.cards)){\n      var flipMatches = hand.flip.suit == hand.cards[0].suit;\n      if(flipMatches){\n        // +5 for 5 card flush.\n        this.messageToSections(socketId, '-Flush for 5');\n        score += 5;\n      } else if(!hand.isCrib){\n        // +4 for 4 card flush if this is not the crib.\n        this.messageToSections(socketId, '-Flush for 4');\n        score += 4;\n      }\n    }\n    //Check for his nobs.\n    for(var i=0;i<hand.cards.length;i++){\n      if(hand.cards[i].face == 'J' && hand.cards[i].suit == hand.flip.suit){\n        this.messageToSections(socketId, '-His nobs for 1');\n        score += 1;\n      }\n    }\n    return score;\n  }\n\n\n  this.newHand();\n\n}\n\nexports.cardFromDeckIndex = function(index){\n  var suit = null;\n  if (index%4 === 0){\n    suit = 'H';\n  }else if (index%4 == 1){\n    suit = 'D';\n  }else if (index%4 == 2){\n    suit = 'C';\n  }else if (index%4 == 3){\n    suit = 'S';\n  }\n  var index = index%13;\n  var playValue = Math.min(index+1, 10);\n  var face = index+1;\n  if (index == 0){\n    face = 'A';\n  }else if (index == 10){\n    face = 'J';\n  }else if (index == 11){\n    face = 'Q';\n  }else if (index == 12){\n    face = 'K'\n  }\n  var card = {'suit': suit, 'face': face, 'playValue': playValue, 'index': index};\n  card.toString = function(){\n    return '(' + this.suit + this.face + ')';\n  }\n  return card;\n}\n\nexports.cardsToString = function(cards){\n  var s = 'Cards[' + cards[0].toString();\n  for(var i=1;i<cards.length;i++){\n    s += ', ' + cards[i].toString();\n  }\n  return s + ']';\n\n}\n// exports.printDeck = function(deck){\n//   console.log('Deck:');\n//   for (var i=0;i<52;i++){\n//     deck[i].print();\n//   }\n//   console.log('\\n\\n');\n// }\n\nexports.makeDeck = function(){\n  var deck = []\n  for (var i=0;i<52;i++){\n    var card = exports.cardFromDeckIndex(i);\n    // card.print();\n    deck[i] = card;\n  }\n  exports.shuffleDeck(deck);\n  return deck;\n}\n\nexports.shuffleDeck = function(deck) {\n  var i = deck.length;\n  if ( i == 0 ) return false;\n  while ( --i ) {\n    var j = Math.floor( Math.random() * ( i + 1 ) );\n    var tempi = deck[i];\n    var tempj = deck[j];\n    deck[i] = tempj;\n    deck[j] = tempi;\n  }\n}\n\nexports.makeCardSets = function(deck) {\n  return {\n    'flip': deck[0],\n    'dealer': new exports.Hand(deck.slice(1,7)),\n    'player': new exports.Hand(deck.slice(7,13)),\n    'crib': new exports.Hand([], true)\n  };\n}\n\nexports.Hand = function(cards, isCrib){\n  this.cards = cards;\n  this.cards.sort(exports.cardCompare);\n  this._flip = null;\n  this.isCrib = typeof isCrib !== 'undefined' ? isCrib : false;\n  this._fullHand = null;\n\n  this.flip = function(flip){\n    this._fullHand = null;\n    this._flip = flip;\n  }\n  this.length = function(){\n    return this.fullHand().length;\n  }\n  this.get = function(index){\n    return this.fullHand()[index];\n  }\n  this.remove = function(index){\n    this._fullHand = null;\n    return this.cards.splice(index, 1)[0];\n  }\n  this.add = function(card){\n    this._fullHand = null;\n    this.cards.push(card);\n    this.cards.sort(exports.cardCompare);\n  }\n  this.fullHand = function(){\n    if(this._fullHand!==null){\n      return this._fullHand;\n    }\n    if(this._flip===null){\n      return this.cards;\n    }\n    this._fullHand = this.cards.slice(0)\n    this._fullHand.push(this._flip);\n    this._fullHand.sort(exports.cardCompare);\n    return this._fullHand;\n  }\n  this.toString = function(){\n    if(this.isCrib){\n      var s = 'Crib';\n    }else{\n      var s = 'Hand';\n    }\n    s += '[' + this.cards[0].toString();\n    for(var i=1;i<this.cards.length;i++){\n      s += ',' + this.cards[i].toString();\n    }\n    if(this._flip){\n      s += ' Flip:' + this._flip.toString();\n    }\n    return s + ']';\n  }\n\n}\n\nexports.combinations = function(cards) {\n  var fn = function(n, src, got, all) {\n    if (n == 0) {\n      if (got.length > 0) {\n        all[all.length] = got;\n      }\n      return;\n    }\n    for (var j = 0; j < src.length; j++) {\n      fn(n - 1, src.slice(j + 1), got.concat([src[j]]), all);\n    }\n    return;\n  }\n  var all = [];\n  for (var i = 0; i < cards.length; i++) {\n    fn(i, cards, [], all);\n  }\n  all.push(cards);\n  return all;\n}\nexports.addCardSum = function(cards){\n  var total = 0;\n  for(var cardIndex=0;cardIndex<cards.length;cardIndex++){\n    total += cards[cardIndex].playValue;\n  }\n  return total;\n}\nexports.isFlush = function(cards){\n  for(var i=1;i<cards.length;i++){\n    if(cards[i].suit != cards[0].suit){\n      return false;\n    }\n  }\n  return true;\n}\nexports.isRun = function(cards){\n  if(cards.length<3){\n    return false;\n  }\n  cards = cards.slice(0);\n  cards.sort(exports.cardCompare);\n  for(var i=1;i<cards.length;i++){\n    if(cards[0].index!=cards[i].index-i){\n      return false;\n    }\n  }\n  return true;\n}\nexports.cardCompare = function(card1, card2){\n  return card1.index - card2.index;\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":19913}]],"length":19913}
{"contributors":[],"silentsave":false,"ts":1360191817625,"patch":[[{"diffs":[[0,"wGame;\n}"],[1,";"],[0,"\n"],[-1,""],[0,"\nexports"]],"start1":565,"start2":565,"length1":17,"length2":18},{"diffs":[[0,"ealer = socketId"],[1,";"],[0,"\n    this.roles["]],"start1":897,"start2":897,"length1":32,"length2":33},{"diffs":[[0," = 'dealer';\n  }"],[1,";"],[0,"\n  this.setPlaye"]],"start1":939,"start2":939,"length1":32,"length2":33},{"diffs":[[0,"socketId"],[1,";"],[0,"\n    thi"]],"start1":1014,"start2":1014,"length1":16,"length2":17},{"diffs":[[0,"player';\n  }"],[1,";"],[0,"\n  this.addC"]],"start1":1052,"start2":1052,"length1":24,"length2":25},{"diffs":[[0,"dealt.')"],[1,";"],[0,"\n    }el"]],"start1":1638,"start2":1638,"length1":16,"length2":17},{"diffs":[[0,"ame();\n    }\n  }"],[1,";"],[0,"\n  this.startGam"]],"start1":1733,"start2":1733,"length1":32,"length2":33},{"diffs":[[0,"s.player"],[1,";"],[0,"\n    thi"]],"start1":1955,"start2":1955,"length1":16,"length2":17},{"diffs":[[0,"s.dealer"],[1,";"],[0,"\n\n    th"]],"start1":2001,"start2":2001,"length1":16,"length2":17},{"diffs":[[0,"his.player);\n  }"],[1,";"],[0,"\n  this.addCrib "]],"start1":2063,"start2":2063,"length1":32,"length2":33},{"diffs":[[0,"ete();\n    }\n  }"],[1,";"],[0,"\n  this.cribComp"]],"start1":2738,"start2":2738,"length1":32,"length2":33},{"diffs":[[0,"tPlay();\n  }"],[1,";"],[0,"\n  this.star"]],"start1":2853,"start2":2853,"length1":24,"length2":25},{"diffs":[[0,"lay':[]}"],[1,";"],[0,"\n    con"]],"start1":2976,"start2":2976,"length1":16,"length2":17},{"diffs":[[0,".player)"],[1,";"],[0,"\n    thi"]],"start1":3037,"start2":3037,"length1":16,"length2":17},{"diffs":[[0,"his.player);\n  }"],[1,";"],[0,"\n  this.setPlayC"]],"start1":3069,"start2":3069,"length1":32,"length2":33},{"diffs":[[0,"Count});\n  }"],[1,";"],[0,"\n  this.addS"]],"start1":3206,"start2":3206,"length1":24,"length2":25},{"diffs":[[0,"etId);\n    }\n  }"],[1,";"],[0,"\n  this.gameWon "]],"start1":3503,"start2":3503,"length1":32,"length2":33},{"diffs":[[0,"dGame();\n  }"],[1,";"],[0,"\n  this.card"]],"start1":3660,"start2":3660,"length1":24,"length2":25},{"diffs":[[0,"card);\n\n    "],[-1,"var "],[0,"card = this."]],"start1":3989,"start2":3989,"length1":28,"length2":24},{"diffs":[[0,"].length"],[1,";"],[0,"\n\n    th"]],"start1":4083,"start2":4083,"length1":16,"length2":17},{"diffs":[[0,"cketId);\n  }"],[1,";"],[0,"\n  this.chec"]],"start1":5120,"start2":5120,"length1":24,"length2":25},{"diffs":[[0,"tId, score);\n  }"],[1,";"],[0,"\n  this.checkLas"]],"start1":6109,"start2":6109,"length1":32,"length2":33},{"diffs":[[0,"eturn 0;\n  }"],[1,";"],[0,"\n  this.requ"]],"start1":6408,"start2":6408,"length1":24,"length2":25},{"diffs":[[0,"or one')"],[1,";"],[0,"\n      t"]],"start1":6614,"start2":6614,"length1":16,"length2":17},{"diffs":[[0,"  return"],[1,";"],[0,"\n    }\n "]],"start1":6691,"start2":6691,"length1":16,"length2":17},{"diffs":[[0," for 2')"],[1,";"],[0,"\n      t"]],"start1":7157,"start2":7157,"length1":16,"length2":17},{"diffs":[[0,"CardPlayer);\n  }"],[1,";"],[0,"\n  this.canPlay "]],"start1":7412,"start2":7412,"length1":32,"length2":33},{"diffs":[[0,"n false;\n  }"],[1,";"],[0,"\n  this.hand"]],"start1":7824,"start2":7824,"length1":24,"length2":25},{"diffs":[[0,"his.player);\n  }"],[1,";"],[0,"\n  this.startNex"]],"start1":8400,"start2":8400,"length1":32,"length2":33},{"diffs":[[0,"'});\n    });\n  }"],[1,";"],[0,"\n  this.scoreHan"]],"start1":8956,"start2":8956,"length1":32,"length2":33},{"diffs":[[0,"rib'));\n\n  }"],[1,";"],[0,"\n  this.swit"]],"start1":9170,"start2":9170,"length1":24,"length2":25},{"diffs":[[0,"Dealer);\n  }"],[1,";"],[0,"\n  this.newH"]],"start1":9354,"start2":9354,"length1":24,"length2":25},{"diffs":[[0,"s.deck);\n  }"],[1,";"],[0,"\n  this.send"]],"start1":9474,"start2":9474,"length1":24,"length2":25},{"diffs":[[0,"aler]});\n  }"],[1,";"],[0,"\n  this.send"]],"start1":9839,"start2":9839,"length1":24,"length2":25},{"diffs":[[0,"nd(message);\n  }"],[1,";"],[0,"\n  this.sendToRo"]],"start1":9925,"start2":9925,"length1":32,"length2":33},{"diffs":[[0,"nd(message);\n  }"],[1,";"],[0,"\n  this.sendToOp"]],"start1":10018,"start2":10018,"length1":32,"length2":33},{"diffs":[[0,"essage);\n  }"],[1,";"],[0,"\n  this.emit"]],"start1":10154,"start2":10154,"length1":24,"length2":25},{"diffs":[[0,"vent, data);\n  }"],[1,";"],[0,"\n  this.emitToOp"]],"start1":10248,"start2":10248,"length1":32,"length2":33},{"diffs":[[0,"vent, data);\n  }"],[1,";"],[0,"\n  this.emitToRo"]],"start1":10388,"start2":10388,"length1":32,"length2":33},{"diffs":[[0,"vent, data);\n  }"],[1,";"],[0,"\n  this.emitToSe"]],"start1":10489,"start2":10489,"length1":32,"length2":33},{"diffs":[[0,", data);\n  }"],[1,";"],[0,"\n  this.mess"]],"start1":10706,"start2":10706,"length1":24,"length2":25},{"diffs":[[0,"ssage});\n  }"],[1,";"],[0,"\n  this.push"]],"start1":10839,"start2":10839,"length1":24,"length2":25},{"diffs":[[0,"etId);\n    }\n  }"],[1,";"],[0,"\n  this.resetHan"]],"start1":11242,"start2":11242,"length1":32,"length2":33},{"diffs":[[0,"gth()});\n  }"],[1,";"],[0,"\n  this.setC"]],"start1":11946,"start2":11946,"length1":24,"length2":25},{"diffs":[[0,"r': 4});\n  }"],[1,";"],[0,"\n  this.show"]],"start1":12061,"start2":12061,"length1":24,"length2":25},{"diffs":[[0,";\n    }\n\n  }"],[1,";"],[0,"\n  this.requ"]],"start1":12340,"start2":12340,"length1":24,"length2":25},{"diffs":[[0,"umber});\n  }"],[1,";"],[0,"\n  this.requ"]],"start1":12828,"start2":12828,"length1":24,"length2":25},{"diffs":[[0,"ds);\n    });\n  }"],[1,";"],[0,"\n  this.requestC"]],"start1":12990,"start2":12990,"length1":32,"length2":33},{"diffs":[[0,"\n    });\n  }"],[1,";"],[0,"\n  this.endG"]],"start1":13166,"start2":13166,"length1":24,"length2":25},{"diffs":[[0,");\n    }\n  }"],[1,";"],[0,"\n  this.scor"]],"start1":13415,"start2":13415,"length1":24,"length2":25},{"diffs":[[0,"Name"],[1," "],[0,"=='crib'"],[1,";"],[0,"\n   "]],"start1":13489,"start2":13489,"length1":16,"length2":18},{"diffs":[[0,"ues for "],[-1,"h"],[1,"c"],[0,"ards in "]],"start1":14046,"start2":14046,"length1":17,"length2":17},{"diffs":[[0," score;\n"],[-1,""],[0,"  }"],[1,";"],[0,"\n\n\n  thi"]],"start1":15790,"start2":15790,"length1":19,"length2":20}]],"length":19961,"saved":false}
